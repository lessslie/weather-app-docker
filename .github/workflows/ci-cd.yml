name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_PREFIX: ghcr.io/${{ github.repository }}

jobs:
  # Testing
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test123
          POSTGRES_DB: weather_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: |
            backend/package-lock.json
            frontend/package-lock.json

      - name: Install Backend Dependencies
        run: |
          cd backend
          npm ci

      - name: Install Frontend Dependencies
        run: |
          cd frontend
          npm ci

      - name: Run Backend Tests
        run: |
          cd backend
          npm run test
        env:
          NODE_ENV: test
          DB_HOST: localhost
          DB_PORT: 5432
          DB_PASSWORD: test123
          REDIS_HOST: localhost
          REDIS_PORT: 6379
          JWT_SECRET: test-secret

      - name: Run Frontend Tests
        run: |
          cd frontend
          npm run test

      - name: Backend Lint
        run: |
          cd backend
          npm run lint

      - name: Frontend Lint
        run: |
          cd frontend
          npm run lint

  # Build Docker Images - Temporarily disabled
  # build:
  #   name: Build Images
  #   runs-on: ubuntu-latest
  #   needs: test
  #   if: github.event_name == 'push'
  #   
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4

  #     - name: Log in to Container Registry
  #       uses: docker/login-action@v3
  #       with:
  #         registry: ${{ env.REGISTRY }}
  #         username: ${{ github.actor }}
  #         password: ${{ secrets.GITHUB_TOKEN }}

  #     - name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@v3

  #     - name: Build and push Backend
  #       uses: docker/build-push-action@v5
  #       with:
  #         context: ./backend
  #         push: true
  #         tags: |
  #           ${{ env.IMAGE_PREFIX }}-backend:latest
  #           ${{ env.IMAGE_PREFIX }}-backend:${{ github.sha }}
  #         cache-from: type=gha
  #         cache-to: type=gha,mode=max

  #     - name: Build and push Frontend
  #       uses: docker/build-push-action@v5
  #       with:
  #         context: ./frontend
  #         push: true
  #         tags: |
  #           ${{ env.IMAGE_PREFIX }}-frontend:latest
  #           ${{ env.IMAGE_PREFIX }}-frontend:${{ github.sha }}
  #         cache-from: type=gha
  #         cache-to: type=gha,mode=max

  #     - name: Build and push Nginx
  #       uses: docker/build-push-action@v5
  #       with:
  #         context: ./nginx
  #         push: true
  #         tags: |
  #           ${{ env.IMAGE_PREFIX }}-nginx:latest
  #           ${{ env.IMAGE_PREFIX }}-nginx:${{ github.sha }}
  #         cache-from: type=gha
  #         cache-to: type=gha,mode=max

  # Deploy (solo en main) - Temporarily disabled
  # deploy:
  #   name: Deploy to Production
  #   runs-on: ubuntu-latest
  #   needs: [test]
  #   if: github.ref == 'refs/heads/main'
  #   environment: production
  #   
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4
  #       
  #     - name: Deploy Application
  #       run: |
  #         echo "Deploying to production..."
  #         echo "Images built and ready!"
  #         echo "Backend: ${{ env.IMAGE_PREFIX }}-backend:${{ github.sha }}"
  #         echo "Frontend: ${{ env.IMAGE_PREFIX }}-frontend:${{ github.sha }}"
  #         echo "Nginx: ${{ env.IMAGE_PREFIX }}-nginx:${{ github.sha }}"
  #         # Aquí irían los comandos de deploy real
