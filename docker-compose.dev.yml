version: '3.8'

services:
  # Base de datos PostgreSQL
  postgres:
    image: postgres:15-alpine
    container_name: weather-db-dev
    restart: unless-stopped
    environment:
      POSTGRES_DB: weather_db_dev
      POSTGRES_USER: weather_user
      POSTGRES_PASSWORD: weather_password_dev
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - "5432:5432"
    volumes:
      - postgres_dev_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U weather_user -d weather_db_dev"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - weather-network

  # Redis para Cache
  redis:
    image: redis:7-alpine
    container_name: weather-redis-dev
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_dev_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - weather-network

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: builder  # Usar etapa de desarrollo
    container_name: weather-api-dev
    restart: unless-stopped
    environment:
      NODE_ENV: development
      PORT: 3000
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USERNAME: weather_user
      DB_PASSWORD: weather_password_dev
      DB_DATABASE: weather_db_dev
      REDIS_HOST: redis
      REDIS_PORT: 6379
      JWT_SECRET: ${JWT_SECRET:-dev_jwt_secret_super_seguro_2025}
      JWT_EXPIRES_IN: 24h
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET:-dev_refresh_secret_super_seguro_2025}
      JWT_REFRESH_EXPIRES_IN: 7d
      OPENWEATHER_API_KEY: ${OPENWEATHER_API_KEY}
    ports:
      - "3000:3000"
    volumes:
      # Hot reload para desarrollo
      - ./backend/src:/app/src
      - ./backend/package.json:/app/package.json
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - weather-network
    command: npm run start:dev

  # Frontend React (modo desarrollo)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: builder
    container_name: weather-frontend-dev
    restart: unless-stopped
    environment:
      NODE_ENV: development
      VITE_API_URL: http://localhost:3000/api/v1
    ports:
      - "5173:5173"
    volumes:
      # Hot reload para desarrollo
      - ./frontend/src:/app/src
      - ./frontend/public:/app/public
      - ./frontend/package.json:/app/package.json
      - ./frontend/vite.config.js:/app/vite.config.js
    depends_on:
      - backend
    networks:
      - weather-network
    command: npm run dev -- --host 0.0.0.0

volumes:
  postgres_dev_data:
    driver: local
  redis_dev_data:
    driver: local

networks:
  weather-network:
    driver: bridge