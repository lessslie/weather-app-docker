version: '3.8'

services:
  # Servicio de PostgreSQL
  postgres:
    container_name: weather_postgres
    image: postgres:15-alpine
    environment:
      POSTGRES_USER: ${DB_USERNAME:-weather_user}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-example_password}
      POSTGRES_DB: ${DB_DATABASE:-weather_db}
    ports:
      - "5433:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - weather-network
    restart: unless-stopped

  # Servicio de Redis (para cach√©)
  redis:
    container_name: weather_redis
    image: redis:7-alpine
    ports:
      - "6380:6379"
    volumes:
      - redis_data:/data
    networks:
      - weather-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Servicio de Backend (NestJS)
  backend:
    container_name: weather_backend
    build:
      context: ./backend
      dockerfile: Dockerfile
    environment:
      - NODE_ENV=${NODE_ENV:-production}
      - PORT=${PORT:-8080}
      - DB_HOST=${DB_HOST:-postgres}
      - DB_PORT=${DB_PORT:-5432}
      - DB_USERNAME=${DB_USERNAME:-weather_user}
      - DB_PASSWORD=${DB_PASSWORD:-example_password}
      - DB_DATABASE=${DB_DATABASE:-weather_db}
      - JWT_SECRET=${JWT_SECRET:-your_jwt_secret_here}
      - OPENWEATHER_API_KEY=${OPENWEATHER_API_KEY:-your_api_key_here}
      - CORS_ORIGIN=${CORS_ORIGIN:-http://localhost}
      - IS_SUPABASE=${IS_SUPABASE:-false}
    ports:
      - "8080:8080"
    depends_on:
      - postgres
      - redis
    networks:
      - weather-network
    restart: unless-stopped

  # Servicio de Frontend (React)
  frontend:
    container_name: weather_frontend
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "80:80"
    depends_on:
      - backend
    networks:
      - weather-network
    restart: unless-stopped

networks:
  weather-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
